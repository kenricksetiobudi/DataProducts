legend.position="none")
df <- get_intraday_data(cookie, what="steps")
len(df)
length(df)
dim(df)
names(df)
df
cookie <- login(email="kenrick.setiobudi@gmail.com", password="Kendidos8")
cookie
df <- get_intraday_data(cookie, what="steps", date="2015-10-28")
ggplot(df) + geom_bar(aes(x=time, y=steps, fill=steps), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
ggplot(df) + geom_bar(aes(x=time, y=steps, fill=steps), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
cookie <- login("kenrick.setiobudi@gmail.com", "Kendidos8")
ggplot(df) + geom_bar(aes(x=time, y=steps, fill=steps), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
df
str(get_intraday_data)
df
start_date="2015-02-17", end_date="2015-02-23")
df2 <- get_daily_data(cookie, what="getTimeInHeartRateZonesPerDay", start_date="2015-02-17", end_date="2015-02-23")
df2
df <- get_15_min_data(cookie, what="steps", date="2015-10-30")
install.packages("UsingR")
library(manipulate)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
objective <- sum(x*w) / sum(w)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu  <- sum(x*w) / sum(w)
final <- sum(w*(x-mu)^2)
final
mu
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
x <- c(x,x*-1)
y <- c(y,y*-1)
mean(y)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(y)
x <- c(x,x*-1)
y <- c(y,y*-1)
cor(x,y) * sd(x) / sd(y)
x <- c(x,x*-1)
y <- c(y,y*-1)
cor(x,y) * sd(x) / sd(y)
cor(x,y) *sd(y)/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
dim)x
dim(x)
dim(y)
x
y
length(x)
length)y
length)y
length(y)
x <- c(x,x*-1)
y <- c(y,y*-1)
cor(x,y) *sd(y)/sd(x)
coef(lm(y~x))
data(mtcars)
lm(mpg~weight)
names(mtcars)
attach(mtcars)
lm(mpg~wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
z <- (x-mean(x))/sd(x)
z
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
("fitbitScraper")
li
install.packages("fitbitScraper")
install.packages("fitbitScraper")
library(fitbitScraper)
cookie <- login("kenrick.setiobudi@gmail.com", "Kendidos8")
df <- get_intraday_data(cookie, what="steps", date="2015-10-30")
ggplot(df) + geom_bar(aes(x=time, y=steps, fill=steps), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
library("ggplot2")
ggplot(df) + geom_bar(aes(x=time, y=steps, fill=steps), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
df
pnorm(-1)
str(pnorm)
str(qnorm)
qnorm(0.95, mean = 1100, sd = 75, lower.tail = FALSE)
3/32
3/32&100
ppois(10, 5*3)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
mtcars
lm(mpg~wt)
attach(mtcars)
lm(mpg~wt)
summary(lm(mpg~wt))
fit <- lm(mpg~wt)
summary(fit)
predict(fit, data.frame(x=mean(x)), interval="confidence")
predict(fit, data.frame(x=c(mean(x))), interval = "confidence")
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(mean(x)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
fit <- lm(mpg~wt)
predict(fit, newdata = data.frame(x=c(mean(x))), interval = "confidence")
mean(x)
x = c(mean(x))
x
data.frame(x=c(mean(x)))
plug <- data.frame(x=c(mean(x)))
predict(fit, newdata = plug, interval = "confidence")
fit <- lm(mtcars$mpg~mtcars$wt)
plug <- data.frame(x=c(mean(x)))
predict(fit, newdata = plug, interval = "confidence")
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(mean(x)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
plug <- data.frame(x=c(mean(wt)))
fit <- lm(mtcars$mpg~mtcars$wt)
plug <- data.frame(x=c(mean(wt)))
predict(fit, newdata = plug, interval = "confidence")
fit <- lm(mtcars$mpg~mtcars$wt)
plug <- data.frame(wt=c(mean(wt)))
predict(fit, newdata = plug, interval = "confidence")
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("confidence"))
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(mean(x)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("confidence"))
print(p2)
p2 <- predict(fit, newdata, interval = ("prediction"))
print(p2)
coef(fit)
summary(fit)
-5.3445-0.5591
fit <- lm(y~1)
fit2 <- lm(y~x-1)
fit <- lm(y~1)
fit2 <- lm(y~x-1)
anova(fit)
anova(lm(y~x))
278.32/1126
hist(runif(1000))
mns=NULL
for(i in 1:1000) mns = c(mns, mean(runif(40)))
hist(mns)
head(mns)
mns
for(i in 1:n) mns = c(i, mean(rexp(n_avg,lambda)))
n = 1000
n_avg = 40
lambda = 0.2
n = 1000
n_avg = 40
set.seed(10000)
for(i in 1:n) mns = c(i, mean(rexp(n_avg,lambda)))
mns
mns
for(i in 1:n) mns = c(mns, mean(rexp(n_avg,lambda)))
mns
mns = NULL
for(i in 1:n) mns = c(mns, mean(rexp(n_avg,lambda)))
mns
mns = NULL
for(i in 1:n) {
mns[i] = mean(rexp(n_avg,lambda))
mean_cumulative[i] = mean(mns[i])
}
mns = NULL
mean_cumulative[i] = NULL
for(i in 1:n) {
mns[i] = mean(rexp(n_avg,lambda))
mean_cumulative[i] = mean(mns[i])
}
mns = NULL
mns_cumulative = NULL
for(i in 1:n) {
mns[i] = mean(rexp(n_avg,lambda))
mns_cumulative[i] = mean(mns[i])
}
mns_cumulative
cbind(mns, mns_cumulative)
mns = NULL
mns_cumulative = NULL
for(i in 1:n) {
mns[i] = mean(rexp(n_avg,lambda))
mns_cumulative[i] = mean(mns)
}
cbind(mns, mns_cumulative)
plot(mns_cumulative)
plot(mns_cumulative, type = "l")
n
length(mns_cumulative)
g <- ggplot(data.frame = (x = 1:n, y = mns_cumulative), aes(x=x, y=y))
g <- ggplot(data.frame(x = 1:n, y = mns_cumulative), aes(x=x, y=y))
library(ggplot2)
g <- ggplot(data.frame(x = 1:n, y = mns_cumulative), aes(x=x, y=y))
g <- g + geom_abline(intercept = mns_theoretical, slope = 0, colour = "red", size = 1)
mns_theoretical = 1/lambda
g <- g + geom_abline(intercept = mns_theoretical, slope = 0, colour = "red", size = 1)
print(g)
max(mns_theoretical)
max(mns_cumulative)
min(mns_cumulative)
str(seq)
seq
seq(1:5,2)
seq(1,5,2)
seq(1,5)
seq(4.75, 5.5)
seq(4.75, 5.55)
seq(4.75, 5.55, 0.1)
seq(4.75, 5.55, 0.2)
g <- ggplot(data.frame(x = 1:n, y = mns_cumulative), aes(x=x, y=y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_abline(intercept = mns_theoretical, slope = 0, colour = "red", size = 1)
g <- g + scale_y_continuous(limits=c(4.75, 5.35),breaks=seq(4.75, 5.35, 0.2))
g <- g + theme(plot.title = element_text(size=12, face="bold"))
g <- g + labs(title = "Cumulative Sample Mean vs Theoretical Means")
g <- g + labs(x = "# of simulations")
g <- g + labs(y = "Cumulative Mean")
g <- g + scale_fill_discrete(name = "Title",labels = c("A", "B", "C"))
print(g)
source('~/.active-rstudio-document', echo=TRUE)
var(mns)
(1/lambda)^2
var(mns) * n
var(mns)
var(mns) * n_avg
qqnorm(mns)
qqline(mns)
log(10)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
mpg <- function(hp, cyl, wt) {
modelFit$coefficients[1] + modelFit$coefficients[2] * hp +
modelFit$coefficients[3] * cyl + modelFit$coefficients[4] * wt
}
shinyServer(
function(input, output) {
adjusted_weight <- reactive({input$wt/1000})
predicted_mpg <- reactive({mpg(input$hp, as.numeric(input$cyl), adjusted_weight())})
output$inputValues <- renderPrint({paste(input$cyl, "cylinders, ",
input$hp, "horsepower, ",
input$wt, "lbs")})
output$prediction <- renderPrint({paste(round(predicted_mpg(), 2), "miles per gallon")})
output$plots <- renderPlot({
par(mfrow = c(1, 3))
# (1, 1)
with(mtcars, plot(hp, mpg,
xlab='Gross horsepower',
ylab='MPG',
main='MPG vs horsepower'))
points(input$hp, predicted_mpg(), col='red', cex=3)
# (1, 2)
with(mtcars, plot(cyl, mpg,
xlab='Number of cylinders',
ylab='MPG',
main='MPG vs cylinders'))
points(as.numeric(input$cyl), predicted_mpg(), col='red', cex=3)
# (1, 3)
with(mtcars, plot(wt, mpg,
xlab='Weight (lb/1000)',
ylab='MPG',
main='MPG vs weight'))
points(adjusted_weight(), predicted_mpg(), col='red', cex=3)
})
}
)
library(shiny)
mpg <- function(hp, cyl, wt) {
modelFit$coefficients[1] + modelFit$coefficients[2] * hp +
modelFit$coefficients[3] * cyl + modelFit$coefficients[4] * wt
}
shinyServer(
function(input, output) {
adjusted_weight <- reactive({input$wt/1000})
predicted_mpg <- reactive({mpg(input$hp, as.numeric(input$cyl), adjusted_weight())})
output$inputValues <- renderPrint({paste(input$cyl, "cylinders, ",
input$hp, "horsepower, ",
input$wt, "lbs")})
output$prediction <- renderPrint({paste(round(predicted_mpg(), 2), "miles per gallon")})
output$plots <- renderPlot({
par(mfrow = c(1, 3))
# (1, 1)
with(mtcars, plot(hp, mpg,
xlab='Gross horsepower',
ylab='MPG',
main='MPG vs horsepower'))
points(input$hp, predicted_mpg(), col='red', cex=3)
# (1, 2)
with(mtcars, plot(cyl, mpg,
xlab='Number of cylinders',
ylab='MPG',
main='MPG vs cylinders'))
points(as.numeric(input$cyl), predicted_mpg(), col='red', cex=3)
# (1, 3)
with(mtcars, plot(wt, mpg,
xlab='Weight (lb/1000)',
ylab='MPG',
main='MPG vs weight'))
points(adjusted_weight(), predicted_mpg(), col='red', cex=3)
})
}
)
library(shiny)
mpg <- function(hp, cyl, wt) {
modelFit$coefficients[1] + modelFit$coefficients[2] * hp +
modelFit$coefficients[3] * cyl + modelFit$coefficients[4] * wt
}
shinyServer(
function(input, output) {
adjusted_weight <- reactive({input$wt/1000})
predicted_mpg <- reactive({mpg(input$hp, as.numeric(input$cyl), adjusted_weight())})
output$inputValues <- renderPrint({paste(input$cyl, "cylinders, ",
input$hp, "horsepower, ",
input$wt, "lbs")})
output$prediction <- renderPrint({paste(round(predicted_mpg(), 2), "miles per gallon")})
output$plots <- renderPlot({
par(mfrow = c(1, 3))
# (1, 1)
with(mtcars, plot(hp, mpg,
xlab='Gross horsepower',
ylab='MPG',
main='MPG vs horsepower'))
points(input$hp, predicted_mpg(), col='red', cex=3)
# (1, 2)
with(mtcars, plot(cyl, mpg,
xlab='Number of cylinders',
ylab='MPG',
main='MPG vs cylinders'))
points(as.numeric(input$cyl), predicted_mpg(), col='red', cex=3)
# (1, 3)
with(mtcars, plot(wt, mpg,
xlab='Weight (lb/1000)',
ylab='MPG',
main='MPG vs weight'))
points(adjusted_weight(), predicted_mpg(), col='red', cex=3)
})
}
)
library(shiny)
mpg <- function(hp, cyl, wt) {
modelFit$coefficients[1] + modelFit$coefficients[2] * hp +
modelFit$coefficients[3] * cyl + modelFit$coefficients[4] * wt
}
shinyServer(
function(input, output) {
adjusted_weight <- reactive({input$wt/1000})
predicted_mpg <- reactive({mpg(input$hp, as.numeric(input$cyl), adjusted_weight())})
output$inputValues <- renderPrint({paste(input$cyl, "cylinders, ",
input$hp, "horsepower, ",
input$wt, "lbs")})
output$prediction <- renderPrint({paste(round(predicted_mpg(), 2), "miles per gallon")})
output$plots <- renderPlot({
par(mfrow = c(1, 3))
# (1, 1)
with(mtcars, plot(hp, mpg,
xlab='Gross horsepower',
ylab='MPG',
main='MPG vs horsepower'))
points(input$hp, predicted_mpg(), col='red', cex=3)
# (1, 2)
with(mtcars, plot(cyl, mpg,
xlab='Number of cylinders',
ylab='MPG',
main='MPG vs cylinders'))
points(as.numeric(input$cyl), predicted_mpg(), col='red', cex=3)
# (1, 3)
with(mtcars, plot(wt, mpg,
xlab='Weight (lb/1000)',
ylab='MPG',
main='MPG vs weight'))
points(adjusted_weight(), predicted_mpg(), col='red', cex=3)
})
}
)
library(shiny)
mpg <- function(hp, cyl, wt) {
modelFit$coefficients[1] + modelFit$coefficients[2] * hp +
modelFit$coefficients[3] * cyl + modelFit$coefficients[4] * wt
}
shinyServer(
function(input, output) {
adjusted_weight <- reactive({input$wt/1000})
predicted_mpg <- reactive({mpg(input$hp, as.numeric(input$cyl), adjusted_weight())})
output$inputValues <- renderPrint({paste(input$cyl, "cylinders, ",
input$hp, "horsepower, ",
input$wt, "lbs")})
output$prediction <- renderPrint({paste(round(predicted_mpg(), 2), "miles per gallon")})
output$plots <- renderPlot({
par(mfrow = c(1, 3))
# (1, 1)
with(mtcars, plot(hp, mpg,
xlab='Gross horsepower',
ylab='MPG',
main='MPG vs horsepower'))
points(input$hp, predicted_mpg(), col='red', cex=3)
# (1, 2)
with(mtcars, plot(cyl, mpg,
xlab='Number of cylinders',
ylab='MPG',
main='MPG vs cylinders'))
points(as.numeric(input$cyl), predicted_mpg(), col='red', cex=3)
# (1, 3)
with(mtcars, plot(wt, mpg,
xlab='Weight (lb/1000)',
ylab='MPG',
main='MPG vs weight'))
points(adjusted_weight(), predicted_mpg(), col='red', cex=3)
})
}
)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel('Developing Data Products - Course Project'),
sidebarPanel(
h3('Instructions'),
p('Enter the gross horsepower, number of cylinders, and weight of your
car below.  The predicted MPG will be shown to the right.'),
h3('Please enter predictors of MPG below.'),
numericInput('hp', 'Gross horsepower:', 140, min = 50, max = 330, step = 10), # example of numeric input
radioButtons('cyl', 'Number of cylinders:', c('4' = 4, '6' = 6, '8' = 8), selected = '4'), # example of radio button input
numericInput('wt', 'Weight (lbs):', 3200, min = 1500, max = 5500, step = 100)
),
mainPanel(
h6('Course Project by William Rowell'),
h3('Predicted MPG'),
h4('You entered:'),
verbatimTextOutput("inputValues"),
h4('Which resulted in a prediction of:'),
verbatimTextOutput("prediction"),
h4('MPG relative to cars in mtcars data set'),
plotOutput('plots'),
h3('Method'),
p('I fit a linear model to the mtcars dataset, modeling the effect of
horsepower, number of cylinders, and weight on the mpg.  Since the
only valid possibilities for number of cylinders in the dataset were
4, 6, and 8, I limited the choice using radio buttons.  For the weight,
reactive() is used to convert the user input weight into the units
used by the model, lb/1000.  Finally, a pre-set function using the
linear model is used to predict the mpg based on the three variables
input by the user.'),
h5('References'),
p('Henderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.')
)
))
setwd("~/Documents/Dropbox/GitHub/DataProducts/01 - Shiny")
runApp()
runApp()
